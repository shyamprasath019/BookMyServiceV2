{"ast":null,"code":"// client/src/utils/fileUploadService.js\nimport api from './api';\n\n/**\r\n * Service for handling file uploads throughout the application\r\n */\nconst fileUploadService = {\n  /**\r\n   * Upload a profile image\r\n   * @param {File} file - The image file to upload\r\n   * @returns {Promise<string>} - URL of the uploaded image\r\n   */\n  uploadProfileImage: async file => {\n    const formData = new FormData();\n    formData.append('profileImage', file);\n    const response = await api.post('/users/profile/image', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.profileImage;\n  },\n  /**\r\n   * Upload gig images\r\n   * @param {Array<File>} files - Array of image files to upload\r\n   * @returns {Promise<Array<string>>} - Array of URLs for the uploaded images\r\n   */\n  uploadGigImages: async files => {\n    const formData = new FormData();\n    files.forEach((file, index) => {\n      formData.append('gigImages', file);\n    });\n    const response = await api.post('/gigs/upload-images', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.imageUrls;\n  },\n  /**\r\n   * Upload job attachments\r\n   * @param {Array<File>} files - Array of files to upload\r\n   * @returns {Promise<Array<string>>} - Array of URLs for the uploaded files\r\n   */\n  uploadJobAttachments: async files => {\n    const formData = new FormData();\n    files.forEach((file, index) => {\n      formData.append('jobAttachments', file);\n    });\n    const response = await api.post('/jobs/upload-attachments', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.attachmentUrls;\n  },\n  /**\r\n   * Upload message attachments\r\n   * @param {Array<File>} files - Array of files to upload\r\n   * @returns {Promise<Array<string>>} - Array of URLs for the uploaded files\r\n   */\n  uploadMessageAttachments: async files => {\n    const formData = new FormData();\n    files.forEach((file, index) => {\n      formData.append('messageAttachments', file);\n    });\n    const response = await api.post('/messages/upload-attachments', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.attachmentUrls;\n  },\n  /**\r\n   * Upload order delivery attachments\r\n   * @param {Array<File>} files - Array of files to upload\r\n   * @returns {Promise<Array<string>>} - Array of URLs for the uploaded files\r\n   */\n  uploadDeliveryAttachments: async files => {\n    const formData = new FormData();\n    files.forEach((file, index) => {\n      formData.append('deliveryAttachments', file);\n    });\n    const response = await api.post('/orders/upload-delivery', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.deliveryUrls;\n  },\n  /**\r\n   * Gets a file's extension\r\n   * @param {string} filename - The filename\r\n   * @returns {string} - The file extension\r\n   */\n  getFileExtension: filename => {\n    return filename.slice((filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\n  },\n  /**\r\n   * Generate a readable file size string\r\n   * @param {number} bytes - File size in bytes\r\n   * @returns {string} - Human readable file size\r\n   */\n  formatFileSize: bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  },\n  /**\r\n   * Check if file is an image\r\n   * @param {File} file - The file to check\r\n   * @returns {boolean} - Whether the file is an image\r\n   */\n  isImage: file => {\n    const acceptedImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n    return acceptedImageTypes.includes(file.type);\n  }\n};\nexport default fileUploadService;","map":{"version":3,"names":["api","fileUploadService","uploadProfileImage","file","formData","FormData","append","response","post","headers","data","profileImage","uploadGigImages","files","forEach","index","imageUrls","uploadJobAttachments","attachmentUrls","uploadMessageAttachments","uploadDeliveryAttachments","deliveryUrls","getFileExtension","filename","slice","lastIndexOf","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","isImage","acceptedImageTypes","includes","type"],"sources":["D:/Data/Project/claude ai/BookMyServiceV2/client/src/utils/fileUploadService.js"],"sourcesContent":["// client/src/utils/fileUploadService.js\r\nimport api from './api';\r\n\r\n/**\r\n * Service for handling file uploads throughout the application\r\n */\r\nconst fileUploadService = {\r\n  /**\r\n   * Upload a profile image\r\n   * @param {File} file - The image file to upload\r\n   * @returns {Promise<string>} - URL of the uploaded image\r\n   */\r\n  uploadProfileImage: async (file) => {\r\n    const formData = new FormData();\r\n    formData.append('profileImage', file);\r\n    \r\n    const response = await api.post('/users/profile/image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    return response.data.profileImage;\r\n  },\r\n  \r\n  /**\r\n   * Upload gig images\r\n   * @param {Array<File>} files - Array of image files to upload\r\n   * @returns {Promise<Array<string>>} - Array of URLs for the uploaded images\r\n   */\r\n  uploadGigImages: async (files) => {\r\n    const formData = new FormData();\r\n    \r\n    files.forEach((file, index) => {\r\n      formData.append('gigImages', file);\r\n    });\r\n    \r\n    const response = await api.post('/gigs/upload-images', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    return response.data.imageUrls;\r\n  },\r\n  \r\n  /**\r\n   * Upload job attachments\r\n   * @param {Array<File>} files - Array of files to upload\r\n   * @returns {Promise<Array<string>>} - Array of URLs for the uploaded files\r\n   */\r\n  uploadJobAttachments: async (files) => {\r\n    const formData = new FormData();\r\n    \r\n    files.forEach((file, index) => {\r\n      formData.append('jobAttachments', file);\r\n    });\r\n    \r\n    const response = await api.post('/jobs/upload-attachments', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    return response.data.attachmentUrls;\r\n  },\r\n  \r\n  /**\r\n   * Upload message attachments\r\n   * @param {Array<File>} files - Array of files to upload\r\n   * @returns {Promise<Array<string>>} - Array of URLs for the uploaded files\r\n   */\r\n  uploadMessageAttachments: async (files) => {\r\n    const formData = new FormData();\r\n    \r\n    files.forEach((file, index) => {\r\n      formData.append('messageAttachments', file);\r\n    });\r\n    \r\n    const response = await api.post('/messages/upload-attachments', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    return response.data.attachmentUrls;\r\n  },\r\n  \r\n  /**\r\n   * Upload order delivery attachments\r\n   * @param {Array<File>} files - Array of files to upload\r\n   * @returns {Promise<Array<string>>} - Array of URLs for the uploaded files\r\n   */\r\n  uploadDeliveryAttachments: async (files) => {\r\n    const formData = new FormData();\r\n    \r\n    files.forEach((file, index) => {\r\n      formData.append('deliveryAttachments', file);\r\n    });\r\n    \r\n    const response = await api.post('/orders/upload-delivery', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    return response.data.deliveryUrls;\r\n  },\r\n  \r\n  /**\r\n   * Gets a file's extension\r\n   * @param {string} filename - The filename\r\n   * @returns {string} - The file extension\r\n   */\r\n  getFileExtension: (filename) => {\r\n    return filename.slice((filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\r\n  },\r\n  \r\n  /**\r\n   * Generate a readable file size string\r\n   * @param {number} bytes - File size in bytes\r\n   * @returns {string} - Human readable file size\r\n   */\r\n  formatFileSize: (bytes) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    \r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    \r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  },\r\n  \r\n  /**\r\n   * Check if file is an image\r\n   * @param {File} file - The file to check\r\n   * @returns {boolean} - Whether the file is an image\r\n   */\r\n  isImage: (file) => {\r\n    const acceptedImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\r\n    return acceptedImageTypes.includes(file.type);\r\n  }\r\n};\r\n\r\nexport default fileUploadService;"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG;EACxB;AACF;AACA;AACA;AACA;EACEC,kBAAkB,EAAE,MAAOC,IAAI,IAAK;IAClC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAEH,IAAI,CAAC;IAErC,MAAMI,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,sBAAsB,EAAEJ,QAAQ,EAAE;MAChEK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOF,QAAQ,CAACG,IAAI,CAACC,YAAY;EACnC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,eAAe,EAAE,MAAOC,KAAK,IAAK;IAChC,MAAMT,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAE/BQ,KAAK,CAACC,OAAO,CAAC,CAACX,IAAI,EAAEY,KAAK,KAAK;MAC7BX,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEH,IAAI,CAAC;IACpC,CAAC,CAAC;IAEF,MAAMI,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,qBAAqB,EAAEJ,QAAQ,EAAE;MAC/DK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOF,QAAQ,CAACG,IAAI,CAACM,SAAS;EAChC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,MAAOJ,KAAK,IAAK;IACrC,MAAMT,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAE/BQ,KAAK,CAACC,OAAO,CAAC,CAACX,IAAI,EAAEY,KAAK,KAAK;MAC7BX,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEH,IAAI,CAAC;IACzC,CAAC,CAAC;IAEF,MAAMI,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,0BAA0B,EAAEJ,QAAQ,EAAE;MACpEK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOF,QAAQ,CAACG,IAAI,CAACQ,cAAc;EACrC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,wBAAwB,EAAE,MAAON,KAAK,IAAK;IACzC,MAAMT,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAE/BQ,KAAK,CAACC,OAAO,CAAC,CAACX,IAAI,EAAEY,KAAK,KAAK;MAC7BX,QAAQ,CAACE,MAAM,CAAC,oBAAoB,EAAEH,IAAI,CAAC;IAC7C,CAAC,CAAC;IAEF,MAAMI,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,8BAA8B,EAAEJ,QAAQ,EAAE;MACxEK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOF,QAAQ,CAACG,IAAI,CAACQ,cAAc;EACrC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,yBAAyB,EAAE,MAAOP,KAAK,IAAK;IAC1C,MAAMT,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAE/BQ,KAAK,CAACC,OAAO,CAAC,CAACX,IAAI,EAAEY,KAAK,KAAK;MAC7BX,QAAQ,CAACE,MAAM,CAAC,qBAAqB,EAAEH,IAAI,CAAC;IAC9C,CAAC,CAAC;IAEF,MAAMI,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,yBAAyB,EAAEJ,QAAQ,EAAE;MACnEK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOF,QAAQ,CAACG,IAAI,CAACW,YAAY;EACnC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,gBAAgB,EAAGC,QAAQ,IAAK;IAC9B,OAAOA,QAAQ,CAACC,KAAK,CAAC,CAACD,QAAQ,CAACE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;EAClE,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,cAAc,EAAGC,KAAK,IAAK;IACzB,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;IAEjC,MAAMC,CAAC,GAAG,IAAI;IACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACzC,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACN,KAAK,CAAC,GAAGI,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC,CAAC;IAEnD,OAAOM,UAAU,CAAC,CAACP,KAAK,GAAGI,IAAI,CAACI,GAAG,CAACP,CAAC,EAAEE,CAAC,CAAC,EAAEM,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGP,KAAK,CAACC,CAAC,CAAC;EACzE,CAAC;EAED;AACF;AACA;AACA;AACA;EACEO,OAAO,EAAGlC,IAAI,IAAK;IACjB,MAAMmC,kBAAkB,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;IACjF,OAAOA,kBAAkB,CAACC,QAAQ,CAACpC,IAAI,CAACqC,IAAI,CAAC;EAC/C;AACF,CAAC;AAED,eAAevC,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}